#include "glb_local.h"
#include "cg_servercmds.h"
#include "cg_viewmodelanim.h"
#include "listener.h"
#include <Windows.h>

void CG_HookCGM()
{
	BYTE jmp_code01[] = {
		0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xE2
	};

	/*BYTE jmp_code01[] = {
		0xE9,
		0x4E,0x04,0x00,0x00
	};

	BYTE jmp_code02[] = {
		0xE9,
		0x44,0x05,0x00,0x00
	};

	BYTE jmp_code03[] = {
		0xE9,
		0xF2,0x03,0x00,0x00
	};

	BYTE jmp_code04[] = {
		0xE9,
		0x71,0x01,0x00,0x00
	};

	BYTE jmp_code05[] = {
		0xE9,
		0x33,0x0F,0x00,0x00
	};

	BYTE jmp_code06[] = {
		0xE9,
		0x2A,0x05,0x00,0x00
	};

	BYTE jmp_code07[] = {
		0xE9,
		0x26,0x00,0x00,0x00
	};

	BYTE jmp_code08[] = {
		0xE9,
		0x21,0x01,0x00,0x00
	};*/

	//test

	*( DWORD * )( ( BYTE * )jmp_code01 + 1 ) = 0x30031346;

	WriteMemory( 0x30030E5D, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x30030EFC, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x30030F4F, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x30030FD0, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x30031002, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x3003109C, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x300310DB, jmp_code01, sizeof( jmp_code01 ) );
	WriteMemory( 0x30031135, jmp_code01, sizeof( jmp_code01 ) );
}

VOID CG_HookClientGame()
{
	int i;

	/* thunk_code1
	 * mov		edx, 99999999h
	 * mov		eax, [esp+24h+4]
	 * mov		ebp, ecx
	 *
	 * push		eax
	 * call		edx
	 */
	/*BYTE thunk_code[250] = { 0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xD2,0x89,0x45,
		0xB0
	};*/

	BYTE thunk_code[] = {
		0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xE2,
	};

	/* thunk_code2
	 * mov		edx, 99999999h
	 * call		edx
	 */
	BYTE thunk_code2[] = { 0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xD2,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90
	};

	/* thunk_code3
	 * mov		ecx, [99999999h+eax*4]
	 * push		ecx
	 */
	BYTE thunk_code3[] = { 0x99,
		0x99,0x99,0x99
	};

	/* thunk_code4
	 * mov		edx, 99999999h
	 * push		eax
	 * call		edx
	 */
	BYTE thunk_code4[] = { 0xBA,
		0x99,0x99,0x99,0x99,0x50,0xFF,0xD2,0xC9,
		0xC3
	};

	/* thunk_code5
	 * mov		edx, 99999999h
	 * call		edx
	 */
	BYTE thunk_code5[] = { 0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xD2,0x90
	};

	/* thunk_code6
	 * mov		edx, 99999999h
	 * call		edx
	 * leave
	 * retn
	 */
	/*BYTE thunk_code6[] = { 0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xD2,0x5D,0xC3
	};*/

	BYTE thunk_code6[] = {
		0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xE2,
	};

	/* thunk_code7
	 *	push    303EBF2Ch		; offset unk_303EBF2C
	 *	push    303EBFD0h		; offset dword_303EBFD0
	 *	mov		edx, 3005C83Ch
	 *	call    edx
	 *	add     esp, 8
	 *
	 *	push    0
	 *	lea     edx, [ebp-198h]	; [ebp+Dst]
	 *	push    edx
	 *	mov		eax, 300473F0h
	 *	call    eax 			; CG_OffsetFirstPersonView
	 *	add     esp, 8
	 */

	/*BYTE thunk_code7[65] = { 0x68,
		0x2C,0xBF,0x3E,0x30,0x68,0xD0,0xBF,0x3E,
		0x30,0xBA,0x3C,0xC8,0x05,0x30,0xFF,0xD2,
		0x81,0xC4,0x08,0x00,0x00,0x00,0x68,0x00,
		0x00,0x00,0x00,0x8D,0x95,0x68,0xFE,0xFF,
		0xFF,0x52,0xB8,0xF0,0x73,0x04,0x30,0xFF,
		0xD0,0x81,0xC4,0x08,0x00,0x00,0x00
	};*/
	BYTE thunk_code7[6];

	/* thunk_code8
	 * cmp     [ebp+var_28], 2
	 */
	BYTE thunk_code8[4] = { 0x83,
		0x7D,0xD8,0x02
	};

	BYTE thunk_code9[4];
	BYTE thunk_code10[15];
	BYTE thunk_code11[60];

	BYTE thunk_code12[] = {
		0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xB5,0xC4,0xFC,
		0xFF,0xFF,0xFF,0xD2
	};

	/*BYTE thunk_code13[] = {
		0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xB5,0x70,0xFE,
		0xFF,0xFF,0xFF,0xD2,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90
	};*/

	BYTE thunk_code13[] = {
		0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		0x90,0x90,0x90,0x90,0x90
	};

	BYTE thunk_code14[] = {
		0xBA,
		0x99,0x99,0x99,0x99,0xFF,0xE2
	};

	BYTE thunk_code15[] = {
		0x31,
		0xC0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90
	};

	BYTE thunk_code16[] = {
		0x90,
		0x90
	};

	BYTE thunk_code17[] = {
		0xEB,
		0x2B
	};

	//for(i=10;i<250;i++)
	//	thunk_code[i] = 0x90; // NOP instructions

	/*for(i=13;i<sizeof(thunk_code13);i++)
		thunk_code13[i] = 0x90;*/

	memset(thunk_code7, 0x90, sizeof(thunk_code7));

	*(DWORD*)((BYTE*)thunk_code + 1) = (DWORD)CG_ViewModelAnimCheck;
	*(DWORD*)((BYTE*)thunk_code2 + 1) = (DWORD)CG_ServerCommand;
	*(DWORD*)((BYTE*)thunk_code3) = (DWORD)itemPrefix;
	*(DWORD*)((BYTE*)thunk_code4 + 1) = (DWORD)VM_GetVMAnimPrefixString;
	*(DWORD*)((BYTE*)thunk_code5 + 1) = (DWORD)CG_GetViewModelAnimName;
	*(DWORD*)((BYTE*)thunk_code6 + 1) = (DWORD)CG_HeightCheck;
	//*(DWORD*)((BYTE*)thunk_code12 + 1) = (DWORD)CG_ParseCGMessage;
	//*(DWORD*)((BYTE*)thunk_code13 + 1) = (DWORD)CG_CalcViewBob;
	//*(DWORD*)((BYTE*)thunk_code14 + 1) = (DWORD)CG_Command_ProcessFile;

	//ReplaceInstruction((LPVOID)0x3004999D, thunk_code, sizeof(thunk_code));
	WriteMemory(0x30049763, thunk_code, sizeof(thunk_code));
	WriteMemory(0x30033419, thunk_code2, sizeof(thunk_code2));
	WriteMemory(0x3004985F, thunk_code3, sizeof(thunk_code3));
	WriteMemory(0x30049AA1, thunk_code3, sizeof(thunk_code3));
	WriteMemory(0x300494EF, thunk_code4, sizeof(thunk_code4));
	WriteMemory(0x30049AAF, thunk_code5, sizeof(thunk_code5));
	//WriteMemory(0x30003966, thunk_code6, sizeof(thunk_code6));
	WriteMemory(0x30031346, thunk_code12, sizeof(thunk_code12));
	WriteMemory(0x30047B91, thunk_code13, sizeof(thunk_code13));

	CG_ModelAnim_f = ( DWORD )detour_function( ( PBYTE )0x3002AE9C, ( PBYTE )CG_ModelAnim, 9 );
	CG_OffsetFirstPersonView_f = ( DWORD )detour_function( ( PBYTE )0x300473F0, ( PBYTE )CG_OffsetFirstPersonView, 9 );
	CG_OffsetThirdPersonView_f = ( DWORD )detour_function( ( PBYTE )0x30048E49, ( PBYTE )CG_OffsetThirdPersonView, 9 );
	//ReplaceInstruction((LPVOID)0x3001A6C9, thunk_code14, sizeof(thunk_code14));

	/* Patch CG_ModelAnim so that the fps doesn't get ugly when cg_animationviewmodel is
	 * set to 1
	 */
	WriteMemory(0x3002CB36, thunk_code7, sizeof(thunk_code7));

	/* Patch the z value of the fps so that we can set it to a custom one */
	WriteMemory(0x3004A279, thunk_code8, sizeof(thunk_code8));

	//*(DWORD*)((BYTE*)thunk_code9) = (DWORD)&internal_bobOffset;
	//ReplaceInstruction((LPVOID)0x30047BA5, thunk_code9, sizeof(thunk_code9));

	/* If a player is playing a demo/has physics off, then the view shouldn't
	 * be sync with the server
	 */
	memset(thunk_code10, 0x90, sizeof(thunk_code10));
	//memset(thunk_code11, 0x90, sizeof(thunk_code11));
	/*WriteMemory(0x30031DDF, thunk_code10, sizeof(thunk_code10));*/

	//WriteMemory( 0x300567AB, thunk_code15, sizeof( thunk_code15 ) );

	// Patch the event system so that events with the same name will count
	WriteMemory( 0x300567C0, thunk_code16, sizeof( thunk_code16 ) );

	WriteMemory( 0x00469F2C, thunk_code17, sizeof( thunk_code17 ) );

	//Event::LoadEvents_f = ( LoadEvents_o )detour_function( ( void * )0x300528FE, &Event::LoadEvents, 10 );

	/* FIXME: if g_synchronousClients/cg_nopredict is enabled, then the view
	 * bobbing and the move animation must still be enabled too
	 */
	//ReplaceInstruction((LPVOID)0x300205ED, thunk_code11, sizeof(thunk_code11));
}
